generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccessLevel {
  self
  other
}

enum DomainStatus {
  pending
  verified
  failed
}

enum TransactionStyle {
  earn_free
  earn_paid
  message_charge
  storage_charge
}

enum MessageStatus {
  queued
  processing
  sent
  bonce
  failed
  reject
  complaint
  delivered
  delivery_delay
  subscription
  opened
  clicked
}

enum OnboardingStep {
  create_domain
  verify_domain
  create_sender
  send_test_email
  completed
}

enum ContactImportStatus {
  pending
  processing
  completed
  failed
}

enum BulkSendingStatus {
  pending
  processing
  completed
  failed
}

enum BulkSendingVariableFrom {
  custom
  contact
  bulk_sending
}

enum ContactDeletedBy {
  contactGroupOwner
  self
}

enum BlockedPermissionEventStyle {
  block
  unblock
}

model User {
  id              String         @id @default(uuid())
  name            String
  email           String         @unique
  ipAddress       String?        @map("ip_address")
  onboardingStep  OnboardingStep @default(create_domain) @map("onboarding_step")
  phone           String?
  birthdate       DateTime?
  gatewayId       String?        @map("gateway_id")
  fingerprint     String?        @map("fingerprint")
  isEmailVerified Boolean        @default(false) @map("is_email_verified")
  accessLevel     AccessLevel    @default(self) @map("access_level")
  password        String
  isPhoneVerified Boolean        @default(false) @map("is_phone_verified")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  deletedAt       DateTime?      @map("deleted_at")

  transactions            Transaction[]
  securityCodes           SecurityCode[]
  domains                 Domain[]
  files                   File[]
  senders                 Sender[]
  messages                Message[]
  storageSizes            StorageSize[]
  checkouts               Checkout[]
  userBetaPermissions     UserBetaPermission[]
  sessions                Session[]                @relation("Session")
  impersonatedBy          Session[]                @relation("ImpersonatedBy")
  contactGroups           ContactGroup[]
  contactImports          ContactImport[]
  bulkSendings            BulkSending[]
  blockedPermissions      BlockedPermission[]
  blockedPermissionEvents BlockedPermissionEvent[]
  userUtm                 UserUtm[]

  @@map("users")
}

model UserUtm {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  utmName   String    @map("utm_name")
  utmValue  String    @map("utm_value")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("users_utm")
}

model BlockedPermission {
  id         String    @id @default(uuid())
  permission String
  reason     String?
  userId     String    @map("user_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("blocked_permissions")
}

model BlockedPermissionEvent {
  id         String                      @id @default(uuid())
  permission String
  userId     String                      @map("user_id")
  style      BlockedPermissionEventStyle
  createdAt  DateTime                    @default(now()) @map("created_at")
  updatedAt  DateTime                    @updatedAt @map("updated_at")
  deletedAt  DateTime?                   @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("blocked_permission_events")
}

model BlockedIpAddress {
  id        String    @id @default(uuid())
  ipAddress String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("blocked_ip_addresses")
}

model PermissionRequiresBeta {
  id         String    @id @default(uuid())
  permission String    @unique
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@index([permission])
  @@map("permissions_requires_beta")
}

model UserBetaPermission {
  id         String    @id @default(uuid())
  userId     String    @map("user_id")
  permission String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_beta_permissions")
}

model Transaction {
  id          String           @id @default(uuid())
  userId      String           @map("user_id")
  gatewayId   String?          @map("gateway_id")
  amount      Int
  description String
  style       TransactionStyle
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  deletedAt   DateTime?        @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Session {
  id                String    @id @default(uuid())
  userId            String    @map("user_id")
  token             String
  description       String?
  permissions       String[]
  impersonateUserId String?   @map("impersonate_user_id")
  expiresAt         DateTime? @map("expires_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")

  user            User  @relation("Session", fields: [userId], references: [id], onDelete: Cascade)
  impersonateUser User? @relation("ImpersonatedBy", fields: [impersonateUserId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model SecurityCode {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  code      String
  expiresAt DateTime  @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("security_codes")
}

model Domain {
  id        String       @id @default(uuid())
  name      String       @unique
  status    DomainStatus @default(pending) @map("status")
  userId    String       @map("user_id")
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  deletedAt DateTime?    @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  dnsRecords DNSRecord[]
  senders    Sender[]
  messages   Message[]
  dkim       DKIM[]

  @@map("domains")
}

model DKIM {
  id         String    @id @default(uuid())
  domainId   String    @map("domain_id")
  publicKey  String
  privateKey String
  selector   String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  domain Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@map("dkim")
}

model DNSRecord {
  id        String    @id @default(uuid())
  domainId  String    @map("domain_id")
  type      String
  name      String
  value     String
  ttl       Int
  priority  Int?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  domain Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@map("dns_records")
}

model File {
  id           String    @id @default(uuid())
  originalName String    @map("original_name")
  key          String
  hash         String
  size         Int
  mimeType     String    @map("mime_type")
  encoding     String
  url          String
  userId       String    @map("user_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  messageFiles   MessageFile[]
  contactImports ContactImport[]

  @@map("files")
}

model StorageSize {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  size      Int
  chargeAt  DateTime  @map("charge_at")
  chargedAt DateTime? @map("charged_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("storage_sizes")
}

model Sender {
  id        String    @id @default(uuid())
  username  String
  name      String
  email     String    @unique
  userId    String    @map("user_id")
  domainId  String    @map("domain_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  domain Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  messages     Message[]
  bulkSendings BulkSending[]

  @@map("senders")
}

model Message {
  id            String        @id @default(uuid())
  userId        String        @map("user_id")
  senderId      String        @map("sender_id")
  domainId      String        @map("domain_id")
  hasCharged    Boolean       @default(false) @map("has_charged")
  subject       String
  body          String
  to            String[]
  contactId     String?       @map("contact_id")
  status        MessageStatus @default(queued)
  bulkSendingId String?       @map("bulk_sending_id")
  externalId    String?       @map("external_id")
  sentDay       String?       @map("sent_day")
  sentAt        DateTime?     @map("sent_at")
  customPayload String?       @map("custom_payload")
  chargeMonth   String?       @map("charge_month") // which month the message will be charged (YYYY-MM)
  createdDay    String        @map("created_day")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  deletedAt     DateTime?     @map("deleted_at")

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  sender      Sender       @relation(fields: [senderId], references: [id], onDelete: Cascade)
  domain      Domain       @relation(fields: [domainId], references: [id], onDelete: Cascade)
  bulkSending BulkSending? @relation(fields: [bulkSendingId], references: [id], onDelete: Cascade)
  contact     Contact?     @relation(fields: [contactId], references: [id], onDelete: Cascade)

  messageFiles MessageFile[]

  @@map("messages")
}

model BulkSending {
  id                String            @id @default(uuid())
  title             String            @map("title")
  userId            String            @map("user_id")
  subject           String
  content           String
  senderId          String            @map("sender_id")
  totalContacts     Int               @default(0) @map("total_contacts")
  processedContacts Int               @default(0) @map("processed_contacts")
  status            BulkSendingStatus @default(pending) @map("status")
  contactGroupId    String            @map("contact_group_id")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  deletedAt         DateTime?         @map("deleted_at")

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  sender       Sender       @relation(fields: [senderId], references: [id], onDelete: Cascade)
  contactGroup ContactGroup @relation(fields: [contactGroupId], references: [id], onDelete: Cascade)

  messages  Message[]
  failures  BulkSendingFailure[]
  variables BulkSendingVariable[]

  @@map("bulk_sendings")
}

model BulkSendingVariable {
  id            String                  @id @default(uuid())
  bulkSendingId String                  @map("bulk_sending_id")
  key           String
  from          BulkSendingVariableFrom
  fromKey       String
  customValue   String?
  createdAt     DateTime                @default(now()) @map("created_at")
  updatedAt     DateTime                @updatedAt @map("updated_at")
  deletedAt     DateTime?               @map("deleted_at")

  bulkSending BulkSending @relation(fields: [bulkSendingId], references: [id], onDelete: Cascade)

  @@map("bulk_sending_variables")
}

model BulkSendingFailure {
  id            String    @id @default(uuid())
  bulkSendingId String    @map("bulk_sending_id")
  message       String
  contactId     String?   @map("contact_id")
  line          Int?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  bulkSending BulkSending @relation(fields: [bulkSendingId], references: [id], onDelete: Cascade)
  contact     Contact?    @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("bulk_sending_failures")
}

model MessageFile {
  id        String    @id @default(uuid())
  messageId String    @map("message_id")
  fileId    String    @map("file_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  file    File    @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("message_files")
}

model Checkout {
  id            String    @id @default(uuid())
  gatewayId     String    @map("gateway_id")
  gatewayUrl    String    @map("gateway_url")
  localAmount   Int       @map("local_amount")
  localCurrency String    @map("local_currency")
  amount        Int
  userId        String    @map("user_id")
  completedAt   DateTime? @map("completed_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("checkouts")
}

model ContactGroup {
  id        String    @id @default(uuid())
  name      String
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  contacts       Contact[]
  contactImports ContactImport[]
  bulkSendings   BulkSending[]

  @@map("contact_groups")
}

model ContactImport {
  id                String              @id @default(uuid())
  fileId            String              @map("file_id")
  emailColumn       String              @map("email_column")
  nameColumn        String              @map("name_column")
  userId            String              @map("user_id")
  contactGroupId    String              @map("contact_group_id")
  totalLines        Int                 @default(0) @map("total_lines")
  readFinalStatusAt DateTime?           @map("read_final_status_at")
  processedLines    Int                 @default(0) @map("processed_lines")
  status            ContactImportStatus @default(pending) @map("status")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  deletedAt         DateTime?           @map("deleted_at")

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactGroup ContactGroup @relation(fields: [contactGroupId], references: [id], onDelete: Cascade)
  file         File         @relation(fields: [fileId], references: [id], onDelete: Cascade)

  failures ContactImportFailure[]
  contacts Contact[]

  @@map("contact_imports")
}

model ContactImportFailure {
  id              String    @id @default(uuid())
  contactImportId String    @map("contact_import_id")
  line            Int?
  message         String
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  contactImport ContactImport @relation(fields: [contactImportId], references: [id], onDelete: Cascade)

  @@map("contact_import_failures")
}

model Contact {
  id              String            @id @default(uuid())
  email           String
  unsubscribeUrl  String            @map("unsubscribe_url")
  unsubscribeKey  String            @map("unsubscribe_key")
  name            String?
  contactGroupId  String            @map("contact_group_id")
  contactImportId String?           @map("contact_import_id")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  deletedBy       ContactDeletedBy? @default(contactGroupOwner) @map("deleted_by")
  deletedAt       DateTime?         @map("deleted_at")

  contactGroup        ContactGroup         @relation(fields: [contactGroupId], references: [id], onDelete: Cascade)
  contactImport       ContactImport?       @relation(fields: [contactImportId], references: [id], onDelete: Cascade)
  bulkSendingFailures BulkSendingFailure[]
  messages            Message[]

  @@map("contacts")
}
