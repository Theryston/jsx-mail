generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccessLevel {
  self
  other
}

enum DomainStatus {
  pending
  verified
  failed
}

enum TransactionStyle {
  earn_free
  earn_paid
  message_charge
  storage_charge
  email_check_charge
}

enum MessageStatus {
  queued
  processing
  sent
  bounce
  failed
  reject
  complaint
  delivered
  delivery_delay
  subscription
  opened
  clicked
}

enum OnboardingStep {
  create_domain
  verify_domain
  create_sender
  send_test_email
  completed
}

enum ContactImportStatus {
  pending
  processing
  completed
  failed
}

enum BulkSendingStatus {
  pending
  processing
  completed
  failed
}

enum BulkSendingVariableFrom {
  custom
  contact
  bulk_sending
}

enum ContactDeletedBy {
  contactGroupOwner
  self
}

enum BouncedBy {
  email_check
  message
}

enum BlockedPermissionEventStyle {
  block
  unblock
}

enum EmailCheckStatus {
  pending
  processing
  completed
  failed
}

enum EmailCheckResult {
  ok
  email_invalid
  risky
  unknown
  accept_all
}

enum BulkEmailCheckStatus {
  pending
  processing
  completed
  failed
}

enum EmailCheckLevel {
  safely
  valid
}

enum BulkEmailCheckBatchStatus {
  pending
  waiting_to_import
  completed
  failed
}

enum ExportStatus {
  pending
  processing
  completed
  failed
}

enum ExportFormat {
  csv
  json
}

model User {
  id              String         @id @default(uuid())
  name            String
  email           String         @unique
  ipAddress       String?        @map("ip_address")
  onboardingStep  OnboardingStep @default(create_domain) @map("onboarding_step")
  phone           String?
  birthdate       DateTime?
  gatewayId       String?        @map("gateway_id")
  fingerprint     String?        @map("fingerprint")
  isEmailVerified Boolean        @default(false) @map("is_email_verified")
  accessLevel     AccessLevel    @default(self) @map("access_level")
  password        String
  isPhoneVerified Boolean        @default(false) @map("is_phone_verified")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  deletedAt       DateTime?      @map("deleted_at")

  transactions            Transaction[]
  securityCodes           SecurityCode[]
  domains                 Domain[]
  files                   File[]
  senders                 Sender[]
  messages                Message[]
  storageSizes            StorageSize[]
  checkouts               Checkout[]
  userBetaPermissions     UserBetaPermission[]
  sessions                Session[]                @relation("Session")
  impersonatedBy          Session[]                @relation("ImpersonatedBy")
  contactGroups           ContactGroup[]
  contactImports          ContactImport[]
  bulkSendings            BulkSending[]
  blockedPermissions      BlockedPermission[]
  blockedPermissionEvents BlockedPermissionEvent[]
  userUtm                 UserUtm[]
  userUtmGroups           UserUtmGroup[]
  settings                UserSettings[]
  bulkEmailChecks         BulkEmailCheck[]
  emailChecks             EmailCheck[]
  leads                   Lead[]
  webhooks                UserWebhook[]
  exports                 Export[]
  isUserPriority          IsUserPriority[]
  messageStatusMappings   MessageStatusMapping[]
  markedComplaintTo       MarkedComplaintTo[]

  @@map("users")
}

model IsUserPriority {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("is_user_priority")
}

model UserWebhook {
  id              String          @id @default(uuid())
  userId          String          @map("user_id")
  url             String
  messageStatuses MessageStatus[] @map("message_statuses")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  deletedAt       DateTime?       @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_webhooks")
}

model Lead {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String
  phone     String?
  userId    String?   @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("leads")
}

model DefaultSettings {
  id                               String    @id @default(uuid())
  maxFileSize                      Float     @map("max_file_size")
  maxBalanceToBeEligibleForFree    Float     @map("max_balance_to_be_eligible_for_free")
  freeEmailsPerMonth               Float     @map("free_emails_per_month")
  minBalanceToAdd                  Float     @map("min_balance_to_add")
  storageGbPrice                   Float     @map("storage_gb_price")
  pricePerMessage                  Float     @map("price_per_message")
  maxStorage                       Float     @map("max_storage")
  globalMaxMessagesPerSecond       Float     @map("global_max_messages_per_second")
  globalMaxMessagesPerDay          Float     @map("global_max_messages_per_day")
  bounceRateLimit                  Float     @map("bounce_rate_limit")
  complaintRateLimit               Float     @map("complaint_rate_limit")
  gapToCheckSecurityInsights       Float     @map("gap_to_check_security_insights")
  minEmailsForRateCalculation      Float     @map("min_emails_for_rate_calculation")
  maxSecurityCodesPerHour          Float     @map("max_security_codes_per_hour")
  maxSecurityCodesPerMinute        Float     @map("max_security_codes_per_minute")
  pricePerEmailCheck               Float     @map("price_per_email_check")
  globalEmailsCheckPerSecond       Float     @map("global_emails_check_per_second")
  globalBulkEmailCheckMaxBatchSize Float     @map("global_bulk_email_check_max_batch_size")
  createdAt                        DateTime  @default(now()) @map("created_at")
  updatedAt                        DateTime  @updatedAt @map("updated_at")
  deletedAt                        DateTime? @map("deleted_at")

  @@map("default_settings")
}

model UserSettings {
  id                            String    @id @default(uuid())
  maxFileSize                   Float?    @map("max_file_size")
  maxBalanceToBeEligibleForFree Float?    @map("max_balance_to_be_eligible_for_free")
  freeEmailsPerMonth            Float?    @map("free_emails_per_month")
  minBalanceToAdd               Float?    @map("min_balance_to_add")
  storageGbPrice                Float?    @map("storage_gb_price")
  pricePerMessage               Float?    @map("price_per_message")
  maxStorage                    Float?    @map("max_storage")
  bounceRateLimit               Float?    @map("bounce_rate_limit")
  complaintRateLimit            Float?    @map("complaint_rate_limit")
  gapToCheckSecurityInsights    Float?    @map("gap_to_check_security_insights")
  minEmailsForRateCalculation   Float?    @map("min_emails_for_rate_calculation")
  maxSecurityCodesPerHour       Float?    @map("max_security_codes_per_hour")
  maxSecurityCodesPerMinute     Float?    @map("max_security_codes_per_minute")
  pricePerEmailCheck            Float?    @map("price_per_email_check")
  userId                        String    @map("user_id")
  createdAt                     DateTime  @default(now()) @map("created_at")
  updatedAt                     DateTime  @updatedAt @map("updated_at")
  deletedAt                     DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model UserUtmGroup {
  id        String    @id @default(uuid())
  userId    String?   @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user  User?              @relation(fields: [userId], references: [id], onDelete: Cascade)
  utms  UserUtm[]
  views UserUtmGroupView[]

  @@map("user_utm_groups")
}

model UserUtm {
  id        String    @id @default(uuid())
  userId    String?   @map("user_id")
  groupId   String?   @map("group_id")
  utmName   String    @map("utm_name")
  utmValue  String    @map("utm_value")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user  User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  group UserUtmGroup? @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("users_utm")
}

model UserUtmGroupView {
  id        String    @id @default(uuid())
  groupId   String    @map("group_id")
  url       String    @map("url")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  group UserUtmGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@map("user_utm_group_views")
}

model BlockedPermission {
  id         String    @id @default(uuid())
  permission String
  reason     String?
  userId     String    @map("user_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("blocked_permissions")
}

model BlockedPermissionEvent {
  id         String                      @id @default(uuid())
  permission String
  userId     String                      @map("user_id")
  style      BlockedPermissionEventStyle
  createdAt  DateTime                    @default(now()) @map("created_at")
  updatedAt  DateTime                    @updatedAt @map("updated_at")
  deletedAt  DateTime?                   @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("blocked_permission_events")
}

model BlockedIpAddress {
  id        String    @id @default(uuid())
  ipAddress String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("blocked_ip_addresses")
}

model PermissionRequiresBeta {
  id         String    @id @default(uuid())
  permission String    @unique
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@index([permission])
  @@map("permissions_requires_beta")
}

model UserBetaPermission {
  id         String    @id @default(uuid())
  userId     String    @map("user_id")
  permission String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_beta_permissions")
}

model Transaction {
  id          String           @id @default(uuid())
  userId      String           @map("user_id")
  gatewayId   String?          @map("gateway_id")
  amount      Int
  description String
  style       TransactionStyle
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  deletedAt   DateTime?        @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Session {
  id                String    @id @default(uuid())
  userId            String    @map("user_id")
  token             String
  description       String?
  permissions       String[]
  impersonateUserId String?   @map("impersonate_user_id")
  expiresAt         DateTime? @map("expires_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  deletedAt         DateTime? @map("deleted_at")

  user            User  @relation("Session", fields: [userId], references: [id], onDelete: Cascade)
  impersonateUser User? @relation("ImpersonatedBy", fields: [impersonateUserId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model SecurityCode {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  code      String
  expiresAt DateTime  @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("security_codes")
}

model Domain {
  id         String       @id @default(uuid())
  name       String       @unique
  status     DomainStatus @default(pending) @map("status")
  externalId String?      @map("external_id")
  userId     String       @map("user_id")
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")
  deletedAt  DateTime?    @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  dnsRecords DNSRecord[]
  senders    Sender[]
  messages   Message[]
  dkim       DKIM[]

  @@map("domains")
}

model DKIM {
  id         String    @id @default(uuid())
  domainId   String    @map("domain_id")
  publicKey  String
  privateKey String
  selector   String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  domain Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@map("dkim")
}

model DNSRecord {
  id        String    @id @default(uuid())
  domainId  String    @map("domain_id")
  type      String
  name      String
  value     String
  ttl       Int
  priority  Int?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  domain Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@map("dns_records")
}

model File {
  id           String    @id @default(uuid())
  originalName String    @map("original_name")
  key          String
  hash         String
  size         Int
  mimeType     String    @map("mime_type")
  encoding     String
  url          String
  userId       String    @map("user_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  messageFiles   MessageFile[]
  contactImports ContactImport[]
  exports        Export[]

  @@map("files")
}

model StorageSize {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  size      Int
  chargeAt  DateTime  @map("charge_at")
  chargedAt DateTime? @map("charged_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("storage_sizes")
}

model Sender {
  id        String    @id @default(uuid())
  username  String
  name      String
  email     String    @unique
  userId    String    @map("user_id")
  domainId  String    @map("domain_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  domain Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  messages     Message[]
  bulkSendings BulkSending[]

  @@map("senders")
}

model Message {
  id            String          @id @default(uuid())
  userId        String          @map("user_id")
  senderId      String          @map("sender_id")
  domainId      String          @map("domain_id")
  hasCharged    Boolean         @default(false) @map("has_charged")
  subject       String
  body          String
  webhookUrl    String?         @map("webhook_url")
  webhookStatus MessageStatus[] @default([]) @map("webhook_status")
  to            String[]
  contactId     String?         @map("contact_id")
  status        MessageStatus   @default(queued)
  bulkSendingId String?         @map("bulk_sending_id")
  externalId    String?         @map("external_id")
  sentDay       String?         @map("sent_day")
  sentAt        DateTime?       @map("sent_at")
  customPayload String?         @map("custom_payload")
  chargeMonth   String?         @map("charge_month") // which month the message will be charged (YYYY-MM)
  createdDay    String          @map("created_day")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  deletedAt     DateTime?       @map("deleted_at")

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  sender      Sender       @relation(fields: [senderId], references: [id], onDelete: Cascade)
  domain      Domain       @relation(fields: [domainId], references: [id], onDelete: Cascade)
  bulkSending BulkSending? @relation(fields: [bulkSendingId], references: [id], onDelete: Cascade)
  contact     Contact?     @relation(fields: [contactId], references: [id], onDelete: Cascade)

  messageFiles   MessageFile[]
  attachments    MessageAttachment[]
  statusHistory  MessageStatusHistory[]
  statusReplaced MessageStatusReplaced[]

  @@map("messages")
}

model MessageStatusReplaced {
  id                String        @id @default(uuid())
  messageId         String        @map("message_id")
  oldStatus         MessageStatus @map("old_status")
  originalNewStatus MessageStatus @map("original_new_status")
  replacedNewStatus MessageStatus @map("replaced_new_status")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  deletedAt         DateTime?     @map("deleted_at")

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("message_status_replaced")
}

model MessageStatusMapping {
  id                 String        @id @default(uuid())
  userId             String        @map("user_id")
  whenMessageStatus  MessageStatus @map("when_message_status")
  whenNewStatus      MessageStatus @map("when_new_status")
  replaceNewStatusTo MessageStatus @map("replace_new_status_to")
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")
  deletedAt          DateTime?     @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("message_status_mappings")
}

model Export {
  id           String       @id @default(uuid())
  userId       String       @map("user_id")
  where        Json
  startDate    DateTime?    @map("start_date")
  endDate      DateTime?    @map("end_date")
  statuses     String[]
  exportStatus ExportStatus @default(pending) @map("export_status")
  format       ExportFormat @default(csv) @map("format")
  fileId       String?      @map("file_id")
  errorMessage String?      @map("error_message")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  deletedAt    DateTime?    @map("deleted_at")

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  file File? @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("exports")
}

model MessageAttachment {
  id        String    @id @default(uuid())
  messageId String    @map("message_id")
  fileName  String    @map("file_name")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("message_attachments")
}

model MessageStatusHistory {
  id          String        @id @default(uuid())
  messageId   String        @map("message_id")
  status      MessageStatus
  description String?
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  extras MessageStatusHistoryExtra[]

  @@map("message_status_history")
}

model MessageStatusHistoryExtra {
  id                     String    @id @default(uuid())
  messageStatusHistoryId String    @map("message_status_history_id")
  key                    String
  value                  String
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  deletedAt              DateTime? @map("deleted_at")

  messageStatusHistory MessageStatusHistory @relation(fields: [messageStatusHistoryId], references: [id], onDelete: Cascade)

  @@map("message_status_history_extras")
}

model BulkSending {
  id                String            @id @default(uuid())
  title             String            @map("title")
  userId            String            @map("user_id")
  subject           String
  content           String
  senderId          String            @map("sender_id")
  totalContacts     Int               @default(0) @map("total_contacts")
  processedContacts Int               @default(0) @map("processed_contacts")
  status            BulkSendingStatus @default(pending) @map("status")
  contactGroupId    String            @map("contact_group_id")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  deletedAt         DateTime?         @map("deleted_at")

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  sender       Sender       @relation(fields: [senderId], references: [id], onDelete: Cascade)
  contactGroup ContactGroup @relation(fields: [contactGroupId], references: [id], onDelete: Cascade)

  messages  Message[]
  failures  BulkSendingFailure[]
  variables BulkSendingVariable[]

  @@map("bulk_sendings")
}

model BulkSendingVariable {
  id            String                  @id @default(uuid())
  bulkSendingId String                  @map("bulk_sending_id")
  key           String
  from          BulkSendingVariableFrom
  fromKey       String
  customValue   String?
  createdAt     DateTime                @default(now()) @map("created_at")
  updatedAt     DateTime                @updatedAt @map("updated_at")
  deletedAt     DateTime?               @map("deleted_at")

  bulkSending BulkSending @relation(fields: [bulkSendingId], references: [id], onDelete: Cascade)

  @@map("bulk_sending_variables")
}

model BulkSendingFailure {
  id            String    @id @default(uuid())
  bulkSendingId String    @map("bulk_sending_id")
  message       String
  contactId     String?   @map("contact_id")
  line          Int?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  bulkSending BulkSending @relation(fields: [bulkSendingId], references: [id], onDelete: Cascade)
  contact     Contact?    @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("bulk_sending_failures")
}

model MessageFile {
  id        String    @id @default(uuid())
  messageId String    @map("message_id")
  fileId    String    @map("file_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  file    File    @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@map("message_files")
}

model Checkout {
  id            String    @id @default(uuid())
  gatewayId     String    @map("gateway_id")
  gatewayUrl    String    @map("gateway_url")
  localAmount   Int       @map("local_amount")
  localCurrency String    @map("local_currency")
  amount        Int
  userId        String    @map("user_id")
  completedAt   DateTime? @map("completed_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("checkouts")
}

model ContactGroup {
  id        String    @id @default(uuid())
  name      String
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  contacts        Contact[]
  contactImports  ContactImport[]
  bulkSendings    BulkSending[]
  bulkEmailChecks BulkEmailCheck[]

  @@map("contact_groups")
}

model ContactImport {
  id                String              @id @default(uuid())
  fileId            String              @map("file_id")
  emailColumn       String              @map("email_column")
  nameColumn        String              @map("name_column")
  userId            String              @map("user_id")
  contactGroupId    String              @map("contact_group_id")
  totalLines        Int                 @default(0) @map("total_lines")
  readFinalStatusAt DateTime?           @map("read_final_status_at")
  processedLines    Int                 @default(0) @map("processed_lines")
  status            ContactImportStatus @default(pending) @map("status")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  deletedAt         DateTime?           @map("deleted_at")

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactGroup ContactGroup @relation(fields: [contactGroupId], references: [id], onDelete: Cascade)
  file         File         @relation(fields: [fileId], references: [id], onDelete: Cascade)

  failures ContactImportFailure[]
  contacts Contact[]

  @@map("contact_imports")
}

model ContactImportFailure {
  id              String    @id @default(uuid())
  contactImportId String    @map("contact_import_id")
  line            Int?
  message         String
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  contactImport ContactImport @relation(fields: [contactImportId], references: [id], onDelete: Cascade)

  @@map("contact_import_failures")
}

model Contact {
  id              String            @id @default(uuid())
  email           String
  unsubscribeUrl  String            @map("unsubscribe_url")
  unsubscribeKey  String            @map("unsubscribe_key")
  name            String?
  contactGroupId  String            @map("contact_group_id")
  contactImportId String?           @map("contact_import_id")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  bouncedAt       DateTime?         @map("bounced_at")
  bouncedBy       BouncedBy?        @map("bounced_by")
  deletedBy       ContactDeletedBy? @default(contactGroupOwner) @map("deleted_by")
  deletedAt       DateTime?         @map("deleted_at")

  contactGroup        ContactGroup         @relation(fields: [contactGroupId], references: [id], onDelete: Cascade)
  contactImport       ContactImport?       @relation(fields: [contactImportId], references: [id], onDelete: Cascade)
  bulkSendingFailures BulkSendingFailure[]
  messages            Message[]
  emailChecks         EmailCheck[]

  @@map("contacts")
}

model BulkEmailCheck {
  id                  String               @id @default(uuid())
  contactGroupId      String?              @map("contact_group_id")
  status              BulkEmailCheckStatus @default(pending) @map("status")
  level               EmailCheckLevel      @default(valid) @map("level")
  totalEmails         Int                  @default(0) @map("total_emails")
  processedEmails     Int                  @default(0) @map("processed_emails")
  userId              String               @map("user_id")
  lastStatusReadAt    DateTime?            @map("last_status_read_at")
  estimatedEndSeconds Int?                 @map("estimated_end_seconds")
  estimatedEndAt      DateTime?            @map("estimated_end_at")
  startedAt           DateTime?            @map("started_at")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  deletedAt           DateTime?            @map("deleted_at")

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactGroup ContactGroup? @relation(fields: [contactGroupId], references: [id], onDelete: Cascade)

  failures BulkEmailCheckFailure[]
  results  EmailCheck[]
  batches  BulkEmailCheckBatch[]

  @@map("bulk_email_checks")
}

model BulkEmailCheckFailure {
  id               String    @id @default(uuid())
  bulkEmailCheckId String    @map("bulk_email_check_id")
  email            String?
  reason           String
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  deletedAt        DateTime? @map("deleted_at")

  bulkEmailCheck BulkEmailCheck @relation(fields: [bulkEmailCheckId], references: [id], onDelete: Cascade)

  @@map("bulk_email_check_failures")
}

model BulkEmailCheckBatch {
  id               String                    @id @default(uuid())
  bulkEmailCheckId String                    @map("bulk_email_check_id")
  status           BulkEmailCheckBatchStatus @default(pending) @map("status")
  externalId       String?                   @map("external_id")
  totalEmails      Int                       @default(0) @map("total_emails")
  createdAt        DateTime                  @default(now()) @map("created_at")
  updatedAt        DateTime                  @updatedAt @map("updated_at")
  deletedAt        DateTime?                 @map("deleted_at")

  bulkEmailCheck BulkEmailCheck @relation(fields: [bulkEmailCheckId], references: [id], onDelete: Cascade)

  @@map("bulk_email_check_batches")
}

model EmailCheck {
  id                String           @id @default(uuid())
  email             String
  status            EmailCheckStatus @default(pending) @map("status")
  result            EmailCheckResult @default(unknown) @map("result")
  level             EmailCheckLevel  @default(valid) @map("level")
  userId            String           @map("user_id")
  bulkEmailCheckId  String?          @map("bulk_email_check_id")
  willRetry         Boolean          @default(false) @map("will_retry")
  contactId         String?          @map("contact_id")
  externalId        String?          @map("external_id")
  startedAt         DateTime?        @map("started_at")
  externalRequestAt DateTime?        @map("external_request_at")
  processedAt       DateTime?        @map("processed_at")
  chargedAt         DateTime?        @map("charged_at")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")
  deletedAt         DateTime?        @map("deleted_at")

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  bulkEmailCheck BulkEmailCheck? @relation(fields: [bulkEmailCheckId], references: [id], onDelete: Cascade)
  contact        Contact?        @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@map("email_checks")
}

model MarkedBounceTo {
  id        String    @id @default(uuid())
  email     String
  bounceBy  BouncedBy @default(email_check) @map("bounce_by")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  expiresAt DateTime? @map("expires_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("marked_bounce_to")
}

model MarkedComplaintTo {
  id        String    @id @default(uuid())
  email     String
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  expiresAt DateTime? @map("expires_at")
  deletedAt DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("marked_complaint_to")
}
